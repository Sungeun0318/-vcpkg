diff --git a/CMakeLists.txt b/CMakeLists.txt
index fb4f1b1..fc5bc4b 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -96,6 +96,7 @@ if (APPLE AND NOT LINK_STATIC)
 else ()
     set(LATEST_PROTOBUF FALSE)
 endif ()
+set(LATEST_PROTOBUF FALSE)
 
 if (NOT CMAKE_CXX_STANDARD)
     if (LATEST_PROTOBUF)
@@ -115,7 +116,6 @@ elseif (CMAKE_CXX_COMPILER_ID STREQUAL "Intel")
     # ?? Don't have this to test with
 else() # GCC or Clang are mostly compatible:
     # Turn on warnings and enable warnings-as-errors:
-    add_compile_options(-Wall -Wformat-security -Wvla -Werror) 
     # Turn off certain warnings that are too much pain for too little gain:
     add_compile_options(-Wno-sign-compare -Wno-deprecated-declarations -Wno-error=cpp)
     if (CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64" OR APPLE)
@@ -157,14 +157,16 @@ if (LATEST_PROTOBUF)
     # Use Config mode to avoid FindProtobuf.cmake does not find the Abseil library
     find_package(Protobuf REQUIRED CONFIG)
 else ()
-    find_package(Protobuf REQUIRED)
+    find_package(Protobuf CONFIG REQUIRED)
+    set(Protobuf_LIBRARIES protobuf::libprotobuf)
+    set(PROTOC_PATH protobuf::protoc)
 endif ()
 message("Protobuf_INCLUDE_DIRS: " ${Protobuf_INCLUDE_DIRS})
 message("Protobuf_LIBRARIES: " ${Protobuf_LIBRARIES})
 
 # NOTE: CMake might not find curl and zlib on some platforms like Ubuntu, in this case, find them manually
 set(CURL_NO_CURL_CMAKE ON)
-find_package(curl QUIET)
+find_package(CURL REQUIRED)
 if (NOT CURL_FOUND)
     find_path(CURL_INCLUDE_DIRS NAMES curl/curl.h)
     find_library(CURL_LIBRARIES NAMES curl curllib libcurl_imp curllib_static libcurl)
@@ -175,7 +177,7 @@ if (NOT CURL_INCLUDE_DIRS OR NOT CURL_LIBRARIES)
     message(FATAL_ERROR "Could not find libcurl")
 endif ()
 
-find_package(zlib QUIET)
+find_package(ZLIB REQUIRED)
 if (NOT ZLIB_FOUND)
     find_path(ZLIB_INCLUDE_DIRS NAMES zlib.h)
     find_library(ZLIB_LIBRARIES NAMES z zlib zdll zlib1 zlibstatic)
@@ -226,6 +228,17 @@ elseif (LINK_STATIC AND VCPKG_TRIPLET)
     if (LIB_SNAPPY)
         message(STATUS "Found Snappy library: ${LIB_SNAPPY}")
     endif ()
+elseif (1)
+    find_package(zstd CONFIG REQUIRED)
+    set(HAS_ZSTD 1)
+    set(LIB_ZSTD
+        $<IF:$<TARGET_EXISTS:zstd::libzstd_shared>,zstd::libzstd_shared,zstd::libzstd_static>)
+    find_package(Snappy CONFIG REQUIRED)
+    set(HAS_SNAPPY 1)
+    set(LIB_SNAPPY Snappy::snappy)
+    if (MSVC)
+        find_package(dlfcn-win32 CONFIG REQUIRED)
+    endif ()
 else()
     if (MSVC AND (${CMAKE_BUILD_TYPE} STREQUAL Debug))
         find_library(LIB_ZSTD zstdd HINTS "${VCPKG_DEBUG_ROOT}/lib")
diff --git a/lib/CMakeLists.txt b/lib/CMakeLists.txt
index 8bd9749..3157ddd 100644
--- a/lib/CMakeLists.txt
+++ b/lib/CMakeLists.txt
@@ -60,6 +60,7 @@ set(LIB_NAME_SHARED ${LIB_NAME})
 # this is the "object library" target: compiles the sources only once
 add_library(PULSAR_OBJECT_LIB OBJECT ${PULSAR_SOURCES})
 set_property(TARGET PULSAR_OBJECT_LIB PROPERTY POSITION_INDEPENDENT_CODE 1)
+target_link_libraries(PULSAR_OBJECT_LIB PUBLIC ${Protobuf_LIBRARIES})
 
 if (BUILD_DYNAMIC_LIB)
     add_library(pulsarShared SHARED $<TARGET_OBJECTS:PULSAR_OBJECT_LIB>)

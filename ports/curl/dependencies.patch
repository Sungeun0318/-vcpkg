diff --git a/CMake/curl-config.cmake.in b/CMake/curl-config.cmake.in
index 056907c..c89c686 100644
--- a/CMake/curl-config.cmake.in
+++ b/CMake/curl-config.cmake.in
@@ -31,6 +31,19 @@ if(@USE_ZLIB@)
   find_dependency(ZLIB @ZLIB_VERSION_MAJOR@)
 endif()
 
+if("@USE_ARES@")
+  find_dependency(c-ares CONFIG)
+endif()
+if("@USE_LIBSSH2@")
+  find_dependency(Libssh2 CONFIG)
+endif()
+if("@HAVE_BROTLI@")
+    find_dependency(unofficial-brotli CONFIG)
+endif()
+if("@USE_LIBRTMP@")
+   find_dependency(unofficial-librtmp CONFIG)
+endif()
+
 include("${CMAKE_CURRENT_LIST_DIR}/@TARGETS_EXPORT_NAME@.cmake")
 check_required_components("@PROJECT_NAME@")
 
diff --git a/CMakeLists.txt b/CMakeLists.txt
index 049ac34..cc0fe19 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -163,7 +163,8 @@ set(CURL_LIBS "")
 
 if(ENABLE_ARES)
   set(USE_ARES 1)
-  find_package(CARES REQUIRED)
+  find_package(CARES NAMES c-ares CONFIG REQUIRED)
+  set(CARES_LIBRARY c-ares::cares)
   list(APPEND CURL_LIBS ${CARES_LIBRARY})
 endif()
 
@@ -372,8 +373,14 @@
 endif()
 
 check_function_exists(gethostname HAVE_GETHOSTNAME)
 
+if(USE_LIBRTMP)
+  find_package(OpenSSL REQUIRED)
+  find_package(unofficial-librtmp CONFIG REQUIRED)
+  list(APPEND CURL_LIBS unofficial::librtmp::librtmp)
+endif()
+
 if(WIN32)
   list(APPEND CURL_LIBS "ws2_32" "bcrypt")
   if(USE_LIBRTMP)
     list(APPEND CURL_LIBS "winmm")
@@ -575,7 +582,9 @@ endif()
 option(CURL_BROTLI "Set to ON to enable building curl with brotli support." OFF)
 set(HAVE_BROTLI OFF)
 if(CURL_BROTLI)
-  find_package(Brotli REQUIRED)
+  find_package(BROTLI NAMES unofficial-brotli REQUIRED)
+  set(BROTLI_INCLUDE_DIRS "")
+  set(BROTLI_LIBRARIES "unofficial::brotli::brotlidec")
   if(BROTLI_FOUND)
     set(HAVE_BROTLI ON)
     set(CURL_LIBS "${BROTLI_LIBRARIES};${CURL_LIBS}")  # For 'ld' linker. Emulate `list(PREPEND ...)` to stay compatible with <v3.15 CMake.
@@ -876,11 +885,10 @@ mark_as_advanced(CURL_USE_LIBPSL)
 set(USE_LIBPSL OFF)
 
 if(CURL_USE_LIBPSL)
-  find_package(LibPSL)
+  find_package(PkgConfig REQUIRED)
+  pkg_check_modules(LIBPSL REQUIRED libpsl)
   if(LIBPSL_FOUND)
-    list(APPEND CURL_LIBS ${LIBPSL_LIBRARY})
-    list(APPEND CMAKE_REQUIRED_INCLUDES "${LIBPSL_INCLUDE_DIR}")
-    include_directories("${LIBPSL_INCLUDE_DIR}")
+    list(APPEND CURL_LIBS ${LIBPSL_LINK_LIBRARIES})
     set(USE_LIBPSL ON)
   endif()
 endif()
@@ -891,7 +899,13 @@ mark_as_advanced(CURL_USE_LIBSSH2)
 set(USE_LIBSSH2 OFF)
 
 if(CURL_USE_LIBSSH2)
-  find_package(LibSSH2)
+  find_package(LIBSSH2 NAMES Libssh2 REQUIRED)
+  if(TARGET Libssh2::libssh2_shared)
+    set(LIBSSH2_LIBRARY Libssh2::libssh2_shared)
+  else()
+    set(LIBSSH2_LIBRARY Libssh2::libssh2_static)
+  endif()
+  get_target_property(LIBSSH2_INCLUDE_DIR "${LIBSSH2_LIBRARY}" INTERFACE_INCLUDE_DIRECTORIES)
   if(LIBSSH2_FOUND)
     list(APPEND CURL_LIBS ${LIBSSH2_LIBRARY})
     list(APPEND CMAKE_REQUIRED_INCLUDES "${LIBSSH2_INCLUDE_DIR}")
diff --git a/lib/curl_config.h.cmake b/lib/curl_config.h.cmake
--- a/lib/curl_config.h.cmake
+++ b/lib/curl_config.h.cmake
@@ -703,8 +703,11 @@
 
 /* if OpenSSL is in use */
 #cmakedefine USE_OPENSSL 1
 
+/* if librtmp/rtmpdump is in use */
+#cmakedefine USE_LIBRTMP 1
+
 /* Define to 1 if you don't want the OpenSSL configuration to be loaded
    automatically */
 #cmakedefine CURL_DISABLE_OPENSSL_AUTO_LOAD_CONFIG 1
 
